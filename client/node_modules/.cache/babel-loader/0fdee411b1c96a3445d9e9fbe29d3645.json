{"ast":null,"code":"var _jsxFileName = \"/home/predator/\\u0414\\u043E\\u043A\\u0443\\u043C\\u0435\\u043D\\u0442\\u0438/ts-live-chat-demo/client/src/App.tsx\";\nimport React from 'react';\nimport './App.css';\nimport { ChatContext } from './ChatContext';\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      messages: [{\n        message: 'Welcome! Type a message and press Send Message to continue the chat.',\n        author: 'Bot'\n      }],\n      input: ''\n    };\n  }\n\n  componentDidMount() {\n    //initiate socket connection\n    this.context.init();\n    const observable = this.context.onMessage();\n    observable.subscribe(m => {\n      let messages = this.state.messages;\n      messages.push(m);\n      this.setState({\n        messages: messages\n      });\n    });\n  }\n\n  componentWillUnmount() {\n    this.context.disconnect();\n  }\n\n  render() {\n    const updateInput = e => {\n      this.setState({\n        input: e.target.value\n      });\n    };\n\n    const handleMessage = () => {\n      const author = 'Ross';\n\n      if (this.state.input !== '') {\n        this.context.send({\n          message: this.state.input,\n          author: author\n        });\n        this.setState({\n          input: ''\n        });\n      }\n    };\n\n    let msgIndex = 0;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 7\n      }\n    });\n  }\n\n}\n\nApp.contextType = ChatContext;\nexport default App;","map":{"version":3,"sources":["/home/predator/Документи/ts-live-chat-demo/client/src/App.tsx"],"names":["React","ChatContext","App","Component","state","messages","message","author","input","componentDidMount","context","init","observable","onMessage","subscribe","m","push","setState","componentWillUnmount","disconnect","render","updateInput","e","target","value","handleMessage","send","msgIndex","contextType"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAO,WAAP;AAEA,SAASC,WAAT,QAA4B,eAA5B;;AAEA,MAAMC,GAAN,SAAkBF,KAAK,CAACG,SAAxB,CAAkC;AAAA;AAAA;AAAA,SAIhCC,KAJgC,GAIb;AACjBC,MAAAA,QAAQ,EAAE,CACR;AACEC,QAAAA,OAAO,EAAE,sEADX;AAEEC,QAAAA,MAAM,EAAE;AAFV,OADQ,CADO;AAOjBC,MAAAA,KAAK,EAAE;AAPU,KAJa;AAAA;;AAchCC,EAAAA,iBAAiB,GAAI;AAEnB;AACA,SAAKC,OAAL,CAAaC,IAAb;AAEA,UAAMC,UAAU,GAAG,KAAKF,OAAL,CAAaG,SAAb,EAAnB;AAEAD,IAAAA,UAAU,CAACE,SAAX,CAAsBC,CAAD,IAAoB;AACvC,UAAIV,QAAQ,GAAG,KAAKD,KAAL,CAAWC,QAA1B;AAEAA,MAAAA,QAAQ,CAACW,IAAT,CAAcD,CAAd;AACA,WAAKE,QAAL,CAAc;AAAEZ,QAAAA,QAAQ,EAAEA;AAAZ,OAAd;AACD,KALD;AAMD;;AAEDa,EAAAA,oBAAoB,GAAI;AACtB,SAAKR,OAAL,CAAaS,UAAb;AACD;;AAEDC,EAAAA,MAAM,GAAI;AAER,UAAMC,WAAW,GAAIC,CAAD,IAAkD;AACpE,WAAKL,QAAL,CAAc;AAAET,QAAAA,KAAK,EAAEc,CAAC,CAACC,MAAF,CAASC;AAAlB,OAAd;AACD,KAFD;;AAIA,UAAMC,aAAa,GAAG,MAAY;AAEhC,YAAMlB,MAAc,GAAG,MAAvB;;AAEA,UAAI,KAAKH,KAAL,CAAWI,KAAX,KAAqB,EAAzB,EAA6B;AAC3B,aAAKE,OAAL,CAAagB,IAAb,CAAkB;AAChBpB,UAAAA,OAAO,EAAE,KAAKF,KAAL,CAAWI,KADJ;AAEhBD,UAAAA,MAAM,EAAEA;AAFQ,SAAlB;AAIA,aAAKU,QAAL,CAAc;AAAET,UAAAA,KAAK,EAAE;AAAT,SAAd;AACD;AACF,KAXD;;AAaA,QAAImB,QAAQ,GAAG,CAAf;AACA,wBACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAKD;;AA1D+B;;AAA5BzB,G,CAGG0B,W,GAAc3B,W;AA2DvB,eAAeC,GAAf","sourcesContent":["import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { ChatMessage, ChatState } from './types';\nimport { ChatContext } from './ChatContext';\n\nclass App extends React.Component {\n\n\n  static contextType = ChatContext;\n  state: ChatState = {\n    messages: [\n      {\n        message: 'Welcome! Type a message and press Send Message to continue the chat.',\n        author: 'Bot'\n      }\n    ],\n    input: ''\n  }\n\n  componentDidMount () {\n\n    //initiate socket connection\n    this.context.init();\n\n    const observable = this.context.onMessage();\n\n    observable.subscribe((m: ChatMessage) => {\n      let messages = this.state.messages;\n\n      messages.push(m);\n      this.setState({ messages: messages });\n    });\n  }\n\n  componentWillUnmount () {\n    this.context.disconnect();\n  }\n\n  render () {\n\n    const updateInput = (e: React.ChangeEvent<HTMLInputElement>): void => {\n      this.setState({ input: e.target.value });\n    }\n\n    const handleMessage = (): void => {\n\n      const author: string = 'Ross';\n\n      if (this.state.input !== '') {\n        this.context.send({\n          message: this.state.input,\n          author: author\n        });\n        this.setState({ input: '' });\n      }\n    };\n\n    let msgIndex = 0;\n    return (\n      <div className=\"App\">\n  \n      </div>\n    );\n  }\n}\n\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}